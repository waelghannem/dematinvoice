pipeline {
    agent any
    tools {
        // Define the Maven tool and specify the name you configured in Jenkins.
        maven 'maven-3.6.0'
    }
    environment {
       SAUCE_ACCESS = credentials('git-credentials')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Delete All Tags') {
           steps {
              script {
                 // List all existing tags and store them in a variable
                 def tagsList = sh(script: 'git tag', returnStdout: true)

                 // Split the tags into an array
                 def tagsArray = tagsList.split("\n")

                 // Loop through the tags and delete them one by one
                 for (def tag in tagsArray) {
                    sh "git tag -d $tag"  // Delete the tag locally
                    // sh "git push origin --delete $tag"  // Delete the tag on the remote repository
                    echo "Deleted tag: $tag"
                 }
              }
           }
        }
        stage('Display Git User Configuration') {
            steps {
                script {
                    // Get and display Git user.name
                    def gitUserName = env.GIT_COMMITTER_NAME
                    echo "Git user.name: $gitUserName"

                    // Get and display Git user.email
                    def gitUserEmail = env.GIT_COMMITTER_EMAIL
                    echo "Git user.email: $gitUserEmail"
                    sh "git config --global user.name ${gitUserName}"
                    sh "git config --global user.email ${gitUserEmail}"
                }
            }
        }
        stage('Create Tag') {
            steps {
                script {
                    def gitUrl = sh(script: 'git config --get remote.origin.url', returnStdout: true)
                    def gitCredentials = env.SAUCE_ACCESS
                    sh "git config credential.helper 'store --file=\$HOME/.git-credentials'"
                    sh "echo ${gitUrl} | sed 's/https:\\/\\//https://${gitCredentials}@/' > url.tmp"
                    sh "git remote set-url origin < url.tmp"
                    // sh "git push origin master"  // Modify branch as needed
                    def version = params.VERSION_NUMBER
                    def tagName = "v${version}"
                    def pomFile = 'pom.xml'
                    def pom = readMavenPom file: pomFile
                    pom.version = version
                    writeMavenPom file: pomFile, model: pom
                    sh "git tag -a ${tagName} -m 'Tag for version ${version}'"
                    sh "git push origin ${tagName}"
                    echo "Created and pushed tag: ${tagName}"
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    def myImageName = params.IMAGE_NAME
                    // Assuming you have Maven installed and configured in your Jenkins environment.
                    sh 'mvn --version'
                    // sh "mvn clean package jib:build -Dimage.name=${myImageName}"
                    withDockerRegistry([credentialsId: 'dockerhub-credentials', url: '']) {
                       // Build and push the Docker image
                       sh "mvn clean package jib:build -Dimage.name=${myImageName}"
                    }
                }
            }
        }
    }
}
