pipeline {
    agent any
    tools {
        maven 'maven-3.6.0'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Delete All Tags') {
           steps {
              script {
                 def tagsList = sh(script: 'git tag', returnStdout: true)
                 def tagsArray = tagsList.split("\n")
                 for (def tag in tagsArray) {
                    sh "git tag -d $tag"  // Delete the tag locally
                    // sh "git push origin --delete $tag"  // Delete the tag on the remote repository
                    echo "Deleted tag: $tag"
                 }
              }
           }
        }
        stage('Create Tag and push') {
            steps {
                script {
                   def version = params.VERSION_NUMBER
                   def tagName = "v${version}"
                   def pomFile = 'pom.xml'
                   def pom = readMavenPom file: pomFile
                   pom.version = version
                   writeMavenPom file: pomFile, model: pom
                   def sshKeyCredentialId = 'jenkins-ssh-key'
                   withCredentials([sshUserPrivateKey(credentialsId: sshKeyCredentialId, keyFileVariable: 'SSH_KEY')]) {
                       sh "git config --get remote.origin.url"
                       sh "git tag -a ${tagName} -m 'Tag for version ${version}'"
                       sh "GIT_SSH_COMMAND=\"ssh -i $SSH_KEY\" git push origin ${tagName} --force"
                   }
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    def myImageName = params.IMAGE_NAME
                    sh 'mvn --version'
                    withDockerRegistry([credentialsId: 'dockerhub-credentials', url: '']) {
                       sh "mvn clean package jib:build -Dimage.name=${myImageName}"
                    }
                }
            }
        }
    }
}
