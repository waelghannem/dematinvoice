pipeline {
    agent any
    tools {
        // Define the Maven tool and specify the name you configured in Jenkins.
        maven 'maven-3.6.0'
    }
    environment {
        AWS_ECS_SERVICE = 'invoicedemat'
        AWS_ECS_TASK_DEFINITION = 'invoicedematExternal'
        AWS_ECS_CLUSTER = 'devCluster'
        AWS_ECS_REGION = 'us-east-1'
        AWS_ECS_TASK_DEFINITION_PATH = './src/main/docker/taskdefinition.json'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    def myImageName = params.IMAGE_NAME
                    // Assuming you have Maven installed and configured in your Jenkins environment.
                    sh 'mvn --version'
                    // sh "mvn clean package jib:build -Dimage.name=${myImageName}"
                    withDockerRegistry([credentialsId: 'dockerhub-credentials', url: '']) {
                       // Build and push the Docker image
                       sh "mvn clean package jib:build -Dimage.name=${myImageName}"
                    }
                }
            }
        }
         stage('Deploy to ECS') {
            steps {
              script {
                 def taskDefinitionRevision = params.TASK_DEFINITION_REVISION
                 withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                     sh 'aws s3 ls'
                     sh("aws ecs register-task-definition --region ${AWS_ECS_REGION} --family ${AWS_ECS_TASK_DEFINITION} --cli-input-json file://${AWS_ECS_TASK_DEFINITION_PATH}")
                     sh "aws ecs update-service --cluster ${AWS_ECS_CLUSTER} --service ${AWS_ECS_SERVICE} --task-definition ${AWS_ECS_TASK_DEFINITION}:${taskDefinitionRevision} --desired-count 0 --force-new-deployment"
                     sh 'sleep 10'
                     sh "aws ecs update-service --cluster ${AWS_ECS_CLUSTER} --service ${AWS_ECS_SERVICE} --task-definition ${AWS_ECS_TASK_DEFINITION}:${taskDefinitionRevision} --desired-count 1 --force-new-deployment"
                 }
              }

            }
         }
    }
    post {
        always {
           deleteDir()
           //sh "docker rmi ${myImageName}"
        }
    }
}
